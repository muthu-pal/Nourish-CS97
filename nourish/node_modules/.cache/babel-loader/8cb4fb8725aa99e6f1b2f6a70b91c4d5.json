{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/bryanluo/Desktop/cs97/Nourish-CS97/nourish/src/post.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport './post.css';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { AuthContext } from './context/auth';\n\nfunction Post(props) {\n  _s();\n\n  const {\n    user\n  } = useContext(AuthContext);\n  const [liked, setLiked] = useState(false);\n  const [currentComments, setCurrentComments] = useState(props.comments);\n  const [addedComment, setAddedComment] = useState(0); //end of upload comment stuff\n\n  useEffect(() => {\n    if (user && props.likes.find(like => like.username === user.username)) {\n      setLiked(true);\n    } else setLiked(false);\n  }, [user, props.likes]);\n  useEffect(() => {\n    setCurrentComments(props.comments);\n    console.log('hello');\n  }, [user, currentComments]);\n  const [likePost] = useMutation(LIKE_POST, {\n    variables: {\n      postId: props.id\n    }\n  });\n  const likeButton = user ? liked ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"likeBox\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"likeButton\",\n      onClick: likePost,\n      style: {\n        backgroundColor: \"#F44336\",\n        color: \"white\"\n      },\n      children: \"Liked\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"likes\",\n      children: [props.likes.length, \" likes\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"likeBox\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"likeButton\",\n      onClick: likePost,\n      style: {\n        backgroundColor: \"white\",\n        color: \"#F44336\"\n      },\n      children: \"Like\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"likes\",\n      children: [props.likes.length, \" likes\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"likeBox-notLoggedIn\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"paragraphLikeBox\",\n      children: \"Log in to like posts.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"likes\",\n      children: [props.likes.length, \" likes\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this); //upload comment stuff\n\n  const [uploadComment] = useMutation(UPLOAD_COMMENT, {});\n\n  function submitComment() {\n    const body_val = document.getElementById(`${props.id}`).value;\n    const id_val = props.id; //if(!commentValue) alert('Cannot submit empty comments'); \n\n    uploadComment({\n      variables: {\n        postId: id_val,\n        body: body_val\n      }\n    });\n    document.getElementById(`${props.id}`).value = \"\";\n  } //props.comments.length > 0 ? post.comments.map((comment)=>(<ul key={comment.id}>{comment.body}</ul>)\n\n\n  const commentInput = user ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"comment-title\",\n      children: \"COMMENTS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-div\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"comment-input\",\n        name: \"commentText\",\n        placeholder: \"enter comment here...\",\n        id: props.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"commentButton\",\n      onClick: submitComment,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), currentComments.length > 0 ? currentComments.map(comment => /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: comment.body\n    }, comment.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 71\n    }, this)) : \"\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"comment-title\",\n      children: \"COMMENTS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), currentComments.length > 0 ? currentComments.map(comment => /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: comment.body\n    }, comment.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 69\n    }, this)) : \"\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n\n  if (props.image !== '') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-post\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-image\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: require('./images/' + props.image).default,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title-post\",\n          children: props.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"paragraphs\",\n          children: props.paragraph\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"tags\",\n          children: [\"Tags: \", props.tags.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), likeButton, commentInput]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-post\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-image\",\n        children: \"NO IMAGE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title-post\",\n          children: props.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"paragraphs\",\n          children: props.paragraph\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"tags\",\n          children: [\"Tags: \", props.tags.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), likeButton, commentInput, /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"comment-title\",\n          children: \"COMMENTS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"comments\",\n          children: props.comments\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(Post, \"6eRyHjrA9ElKOvnedaf9mj5QfhE=\", false, function () {\n  return [useMutation, useMutation];\n});\n\n_c = Post;\nconst LIKE_POST = gql`\n  mutation likePost($postId: ID!){\n    likePost(postId: $postId){\n      id\n      likes{\n        id username\n      }\n    }\n  }\n`;\nconst UPLOAD_COMMENT = gql`\n  mutation createComment($postId: ID!, $body: String!){\n    createComment(postId: $postId, body: $body){\n      id\n    }\n  }\n`;\nexport default Post; //\"https://images.unsplash.com/photo-1498837167922-ddd27525d352?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max\"\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/bryanluo/Desktop/cs97/Nourish-CS97/nourish/src/post.js"],"names":["React","useContext","useEffect","useState","gql","useMutation","AuthContext","Post","props","user","liked","setLiked","currentComments","setCurrentComments","comments","addedComment","setAddedComment","likes","find","like","username","console","log","likePost","LIKE_POST","variables","postId","id","likeButton","backgroundColor","color","length","uploadComment","UPLOAD_COMMENT","submitComment","body_val","document","getElementById","value","id_val","body","commentInput","map","comment","image","require","default","title","paragraph","tags","toString"],"mappings":"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","sourcesContent":["import React , { useContext, useEffect, useState } from 'react';\nimport './post.css'\nimport gql from 'graphql-tag';\nimport {useMutation} from '@apollo/react-hooks';\nimport { AuthContext } from './context/auth'; \n\nfunction Post(props) {\n\n  const { user } = useContext(AuthContext);\n\n  const [liked, setLiked] = useState(false);\n  const [currentComments, setCurrentComments] = useState(props.comments); \n  const [addedComment, setAddedComment ] = useState(0); \n//end of upload comment stuff\n\n  useEffect(() => {\n    if (user && props.likes.find((like) => like.username === user.username)) {\n      setLiked(true);\n    } else setLiked(false);\n  }, [user, props.likes]);\n\n  useEffect(() => {\n    setCurrentComments(props.comments); \n    console.log('hello');\n  }, [user, currentComments]);\n\n  const [likePost] = useMutation(LIKE_POST,{\n    variables: { postId: props.id }\n  })\n\n  const likeButton = \n  user ? (\n    liked ? (\n      <div className=\"likeBox\">\n        <button className=\"likeButton\" onClick={likePost} style={{backgroundColor:\"#F44336\", color:\"white\"}}>Liked</button> \n        <h5 className=\"likes\">{props.likes.length} likes</h5>\n      </div>\n    ) : (\n      <div className=\"likeBox\">\n        <button className=\"likeButton\" onClick={likePost} style={{backgroundColor:\"white\", color:\"#F44336\"}}>Like</button> \n        <h5 className=\"likes\">{props.likes.length} likes</h5>\n      </div>\n    )\n  ) : (\n    <div className=\"likeBox-notLoggedIn\">\n        <p className=\"paragraphLikeBox\">Log in to like posts.</p> \n        <h5 className=\"likes\">{props.likes.length} likes</h5>\n      </div>\n  );\n  \n  //upload comment stuff\n  const [uploadComment] = useMutation(UPLOAD_COMMENT,{\n  \n  })\n  function submitComment(){\n    const body_val = document.getElementById(`${props.id}`).value;\n    const id_val = props.id; \n    //if(!commentValue) alert('Cannot submit empty comments'); \n    uploadComment({ variables: { postId: id_val, body: body_val}})\n    document.getElementById(`${props.id}`).value = \"\";\n  }\n  \n//props.comments.length > 0 ? post.comments.map((comment)=>(<ul key={comment.id}>{comment.body}</ul>)\n  const commentInput = \n  user ? (\n      <div>\n        <h5 className=\"comment-title\">COMMENTS</h5>\n        <div className=\"comment-div\">\n          <input className=\"comment-input\"\n            name='commentText'\n            placeholder='enter comment here...'\n            id={props.id}\n          />\n        </div>\n        <button className=\"commentButton\" onClick={submitComment}>Submit</button>\n        {currentComments.length > 0 ? currentComments.map((comment)=>(<ul key={comment.id}>{comment.body}</ul>)) : \"\"}\n      </div>\n  ) : (\n    <div>\n      <h5 className=\"comment-title\">COMMENTS</h5>\n      {currentComments.length > 0 ? currentComments.map((comment)=>(<ul key={comment.id}>{comment.body}</ul>)) : \"\"}\n    </div>\n  );\n\n\n  if(props.image!==''){\n    return (\n      <div className=\"container-post\">\n        <div className=\"post-image\">\n          <img src={require('./images/'+props.image).default} alt=\"\"/>\n\n        </div>\n        <div className=\"post-content\">\n          <h1 className=\"title-post\">{props.title}</h1>\n          <p className=\"paragraphs\">{props.paragraph}</p>\n          <h5 className=\"tags\">Tags: {props.tags.toString()}</h5>\n          {likeButton}\n          {commentInput}\n        </div>\n      </div>\n    )\n  }\n  else{\n    return (\n      <div className=\"container-post\">\n        <div className=\"post-image\">\n          NO IMAGE\n\n        </div>\n        <div className=\"post-content\">\n          <h1 className=\"title-post\">{props.title}</h1>\n          <p className=\"paragraphs\">{props.paragraph}</p>\n          <h5 className=\"tags\">Tags: {props.tags.toString()}</h5>\n          {likeButton}\n          {commentInput}\n          <h5 className=\"comment-title\">COMMENTS</h5>\n          <p className=\"comments\">{props.comments}</p>\n        </div>\n      </div>\n    )\n  }\n  }\n  \n  const LIKE_POST = gql`\n  mutation likePost($postId: ID!){\n    likePost(postId: $postId){\n      id\n      likes{\n        id username\n      }\n    }\n  }\n`\n\nconst UPLOAD_COMMENT = gql`\n  mutation createComment($postId: ID!, $body: String!){\n    createComment(postId: $postId, body: $body){\n      id\n    }\n  }\n`\n  export default Post\n\n  //\"https://images.unsplash.com/photo-1498837167922-ddd27525d352?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max\""]},"metadata":{},"sourceType":"module"}