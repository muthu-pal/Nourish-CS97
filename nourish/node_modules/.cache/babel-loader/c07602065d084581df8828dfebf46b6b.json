{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bryanluo/Desktop/cs97/Nourish-CS97/nourish/src/ApolloProvider.js\";\nimport React from 'react';\nimport App from './App.js';\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { setContext } from 'apollo-link-context';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { ApolloLink } from 'apollo-link'; //i dont think need this actually, i just used concat\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:5000/' //will change for production or deployment\n\n});\nconst authLink = setContext(() => {\n  const token = localStorage.getItem('jwtToken');\n  return {\n    headers: {\n      Authorization: token ? `Bearer ${token}` : ''\n    }\n  };\n});\nconst client = new ApolloClient({\n  link: createUploadLink({\n    uri: 'http://localhost:5000/'\n  }),\n  cache: new InMemoryCache()\n});\nexport default /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 33,\n  columnNumber: 5\n}, this);","map":{"version":3,"sources":["/Users/bryanluo/Desktop/cs97/Nourish-CS97/nourish/src/ApolloProvider.js"],"names":["React","App","ApolloClient","InMemoryCache","createHttpLink","ApolloProvider","setContext","createUploadLink","ApolloLink","httpLink","uri","authLink","token","localStorage","getItem","headers","Authorization","client","link","cache"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,UAAT,QAA0B,qBAA1B;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,UAAT,QAA2B,aAA3B,C,CAA0C;;AAE1C,MAAMC,QAAQ,GAAGL,cAAc,CAAC;AAC5BM,EAAAA,GAAG,EAAE,wBADuB,CACE;;AADF,CAAD,CAA/B;AAIA,MAAMC,QAAQ,GAAGL,UAAU,CAAC,MAAM;AAC9B,QAAMM,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAd;AACA,SAAO;AACLC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAEJ,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AADpC;AADJ,GAAP;AAKH,CAP0B,CAA3B;AAUA,MAAMK,MAAM,GAAG,IAAIf,YAAJ,CAAiB;AAC5BgB,EAAAA,IAAI,EAAEX,gBAAgB,CAAC;AAClBG,IAAAA,GAAG,EAAE;AADa,GAAD,CADM;AAI5BS,EAAAA,KAAK,EAAE,IAAIhB,aAAJ;AAJqB,CAAjB,CAAf;AAOA,4BACI,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAEc,MAAxB;AAAA,yBACI,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,QADJ","sourcesContent":["import React from 'react'\nimport App from './App.js'\nimport ApolloClient from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { createHttpLink } from 'apollo-link-http'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { setContext} from 'apollo-link-context'\nimport { createUploadLink } from 'apollo-upload-client'\nimport { ApolloLink } from 'apollo-link'  //i dont think need this actually, i just used concat\n\nconst httpLink = createHttpLink({\n    uri: 'http://localhost:5000/' //will change for production or deployment\n});\n\nconst authLink = setContext(() => {\n    const token = localStorage.getItem('jwtToken');\n    return {\n      headers: {\n        Authorization: token ? `Bearer ${token}` : ''\n      }\n    };\n});\n\n\nconst client = new ApolloClient({\n    link: createUploadLink({\n         uri: 'http://localhost:5000/',\n    }),\n    cache: new InMemoryCache(),\n});\n\nexport default(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>\n);"]},"metadata":{},"sourceType":"module"}